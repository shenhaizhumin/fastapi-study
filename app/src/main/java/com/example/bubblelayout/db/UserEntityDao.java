package com.example.bubblelayout.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bubblelayout.entity.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, Long> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Nickname = new Property(6, String.class, "nickname", false, "NICKNAME");
        public final static Property Avatar_url = new Property(7, String.class, "avatar_url", false, "AVATAR_URL");
        public final static Property Moment_image = new Property(8, String.class, "moment_image", false, "MOMENT_IMAGE");
        public final static Property Latest_ip = new Property(9, String.class, "latest_ip", false, "LATEST_IP");
        public final static Property Latest_time = new Property(10, String.class, "latest_time", false, "LATEST_TIME");
        public final static Property Access_token = new Property(11, String.class, "access_token", false, "ACCESS_TOKEN");
        public final static Property Type_role = new Property(12, String.class, "type_role", false, "TYPE_ROLE");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"UID\" TEXT," + // 2: uid
                "\"USERNAME\" TEXT," + // 3: username
                "\"EMAIL\" TEXT," + // 4: email
                "\"MOBILE\" TEXT," + // 5: mobile
                "\"NICKNAME\" TEXT," + // 6: nickname
                "\"AVATAR_URL\" TEXT," + // 7: avatar_url
                "\"MOMENT_IMAGE\" TEXT," + // 8: moment_image
                "\"LATEST_IP\" TEXT," + // 9: latest_ip
                "\"LATEST_TIME\" TEXT," + // 10: latest_time
                "\"ACCESS_TOKEN\" TEXT," + // 11: access_token
                "\"TYPE_ROLE\" TEXT);"); // 12: type_role
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(8, avatar_url);
        }
 
        String moment_image = entity.getMoment_image();
        if (moment_image != null) {
            stmt.bindString(9, moment_image);
        }
 
        String latest_ip = entity.getLatest_ip();
        if (latest_ip != null) {
            stmt.bindString(10, latest_ip);
        }
 
        String latest_time = entity.getLatest_time();
        if (latest_time != null) {
            stmt.bindString(11, latest_time);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(12, access_token);
        }
 
        String type_role = entity.getType_role();
        if (type_role != null) {
            stmt.bindString(13, type_role);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(7, nickname);
        }
 
        String avatar_url = entity.getAvatar_url();
        if (avatar_url != null) {
            stmt.bindString(8, avatar_url);
        }
 
        String moment_image = entity.getMoment_image();
        if (moment_image != null) {
            stmt.bindString(9, moment_image);
        }
 
        String latest_ip = entity.getLatest_ip();
        if (latest_ip != null) {
            stmt.bindString(10, latest_ip);
        }
 
        String latest_time = entity.getLatest_time();
        if (latest_time != null) {
            stmt.bindString(11, latest_time);
        }
 
        String access_token = entity.getAccess_token();
        if (access_token != null) {
            stmt.bindString(12, access_token);
        }
 
        String type_role = entity.getType_role();
        if (type_role != null) {
            stmt.bindString(13, type_role);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // moment_image
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // latest_ip
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // latest_time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // access_token
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // type_role
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNickname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMoment_image(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLatest_ip(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLatest_time(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAccess_token(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setType_role(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
