package com.example.bubblelayout.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bubblelayout.entity.ConversationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONVERSATION_ENTITY".
*/
public class ConversationEntityDao extends AbstractDao<ConversationEntity, Long> {

    public static final String TABLENAME = "CONVERSATION_ENTITY";

    /**
     * Properties of entity ConversationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property FriendId = new Property(2, Integer.class, "friendId", false, "FRIEND_ID");
        public final static Property ConversationType = new Property(3, String.class, "conversationType", false, "CONVERSATION_TYPE");
        public final static Property TargetId = new Property(4, Integer.class, "targetId", false, "TARGET_ID");
        public final static Property ConversationTitle = new Property(5, String.class, "conversationTitle", false, "CONVERSATION_TITLE");
        public final static Property PortraitUrl = new Property(6, String.class, "portraitUrl", false, "PORTRAIT_URL");
        public final static Property UnreadMessageCount = new Property(7, Integer.class, "unreadMessageCount", false, "UNREAD_MESSAGE_COUNT");
        public final static Property IsTop = new Property(8, Boolean.class, "isTop", false, "IS_TOP");
        public final static Property ReceivedStatus = new Property(9, Boolean.class, "receivedStatus", false, "RECEIVED_STATUS");
        public final static Property SentStatus = new Property(10, String.class, "sentStatus", false, "SENT_STATUS");
        public final static Property ReceivedTime = new Property(11, Long.class, "receivedTime", false, "RECEIVED_TIME");
        public final static Property SentTime = new Property(12, Long.class, "sentTime", false, "SENT_TIME");
        public final static Property ObjectName = new Property(13, String.class, "objectName", false, "OBJECT_NAME");
        public final static Property SenderUserId = new Property(14, Integer.class, "senderUserId", false, "SENDER_USER_ID");
        public final static Property SenderUserName = new Property(15, String.class, "senderUserName", false, "SENDER_USER_NAME");
        public final static Property LatestMessageId = new Property(16, Integer.class, "latestMessageId", false, "LATEST_MESSAGE_ID");
        public final static Property LatestMessage = new Property(17, String.class, "latestMessage", false, "LATEST_MESSAGE");
        public final static Property Draft = new Property(18, String.class, "draft", false, "DRAFT");
    }


    public ConversationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONVERSATION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"FRIEND_ID\" INTEGER," + // 2: friendId
                "\"CONVERSATION_TYPE\" TEXT," + // 3: conversationType
                "\"TARGET_ID\" INTEGER," + // 4: targetId
                "\"CONVERSATION_TITLE\" TEXT," + // 5: conversationTitle
                "\"PORTRAIT_URL\" TEXT," + // 6: portraitUrl
                "\"UNREAD_MESSAGE_COUNT\" INTEGER," + // 7: unreadMessageCount
                "\"IS_TOP\" INTEGER," + // 8: isTop
                "\"RECEIVED_STATUS\" INTEGER," + // 9: receivedStatus
                "\"SENT_STATUS\" TEXT," + // 10: sentStatus
                "\"RECEIVED_TIME\" INTEGER," + // 11: receivedTime
                "\"SENT_TIME\" INTEGER," + // 12: sentTime
                "\"OBJECT_NAME\" TEXT," + // 13: objectName
                "\"SENDER_USER_ID\" INTEGER," + // 14: senderUserId
                "\"SENDER_USER_NAME\" TEXT," + // 15: senderUserName
                "\"LATEST_MESSAGE_ID\" INTEGER," + // 16: latestMessageId
                "\"LATEST_MESSAGE\" TEXT," + // 17: latestMessage
                "\"DRAFT\" TEXT);"); // 18: draft
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONVERSATION_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ConversationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindLong(3, friendId);
        }
 
        String conversationType = entity.getConversationType();
        if (conversationType != null) {
            stmt.bindString(4, conversationType);
        }
 
        Integer targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(5, targetId);
        }
 
        String conversationTitle = entity.getConversationTitle();
        if (conversationTitle != null) {
            stmt.bindString(6, conversationTitle);
        }
 
        String portraitUrl = entity.getPortraitUrl();
        if (portraitUrl != null) {
            stmt.bindString(7, portraitUrl);
        }
 
        Integer unreadMessageCount = entity.getUnreadMessageCount();
        if (unreadMessageCount != null) {
            stmt.bindLong(8, unreadMessageCount);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(9, isTop ? 1L: 0L);
        }
 
        Boolean receivedStatus = entity.getReceivedStatus();
        if (receivedStatus != null) {
            stmt.bindLong(10, receivedStatus ? 1L: 0L);
        }
 
        String sentStatus = entity.getSentStatus();
        if (sentStatus != null) {
            stmt.bindString(11, sentStatus);
        }
 
        Long receivedTime = entity.getReceivedTime();
        if (receivedTime != null) {
            stmt.bindLong(12, receivedTime);
        }
 
        Long sentTime = entity.getSentTime();
        if (sentTime != null) {
            stmt.bindLong(13, sentTime);
        }
 
        String objectName = entity.getObjectName();
        if (objectName != null) {
            stmt.bindString(14, objectName);
        }
 
        Integer senderUserId = entity.getSenderUserId();
        if (senderUserId != null) {
            stmt.bindLong(15, senderUserId);
        }
 
        String senderUserName = entity.getSenderUserName();
        if (senderUserName != null) {
            stmt.bindString(16, senderUserName);
        }
 
        Integer latestMessageId = entity.getLatestMessageId();
        if (latestMessageId != null) {
            stmt.bindLong(17, latestMessageId);
        }
 
        String latestMessage = entity.getLatestMessage();
        if (latestMessage != null) {
            stmt.bindString(18, latestMessage);
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(19, draft);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ConversationEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Integer friendId = entity.getFriendId();
        if (friendId != null) {
            stmt.bindLong(3, friendId);
        }
 
        String conversationType = entity.getConversationType();
        if (conversationType != null) {
            stmt.bindString(4, conversationType);
        }
 
        Integer targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(5, targetId);
        }
 
        String conversationTitle = entity.getConversationTitle();
        if (conversationTitle != null) {
            stmt.bindString(6, conversationTitle);
        }
 
        String portraitUrl = entity.getPortraitUrl();
        if (portraitUrl != null) {
            stmt.bindString(7, portraitUrl);
        }
 
        Integer unreadMessageCount = entity.getUnreadMessageCount();
        if (unreadMessageCount != null) {
            stmt.bindLong(8, unreadMessageCount);
        }
 
        Boolean isTop = entity.getIsTop();
        if (isTop != null) {
            stmt.bindLong(9, isTop ? 1L: 0L);
        }
 
        Boolean receivedStatus = entity.getReceivedStatus();
        if (receivedStatus != null) {
            stmt.bindLong(10, receivedStatus ? 1L: 0L);
        }
 
        String sentStatus = entity.getSentStatus();
        if (sentStatus != null) {
            stmt.bindString(11, sentStatus);
        }
 
        Long receivedTime = entity.getReceivedTime();
        if (receivedTime != null) {
            stmt.bindLong(12, receivedTime);
        }
 
        Long sentTime = entity.getSentTime();
        if (sentTime != null) {
            stmt.bindLong(13, sentTime);
        }
 
        String objectName = entity.getObjectName();
        if (objectName != null) {
            stmt.bindString(14, objectName);
        }
 
        Integer senderUserId = entity.getSenderUserId();
        if (senderUserId != null) {
            stmt.bindLong(15, senderUserId);
        }
 
        String senderUserName = entity.getSenderUserName();
        if (senderUserName != null) {
            stmt.bindString(16, senderUserName);
        }
 
        Integer latestMessageId = entity.getLatestMessageId();
        if (latestMessageId != null) {
            stmt.bindLong(17, latestMessageId);
        }
 
        String latestMessage = entity.getLatestMessage();
        if (latestMessage != null) {
            stmt.bindString(18, latestMessage);
        }
 
        String draft = entity.getDraft();
        if (draft != null) {
            stmt.bindString(19, draft);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ConversationEntity readEntity(Cursor cursor, int offset) {
        ConversationEntity entity = new ConversationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // friendId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // conversationType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // targetId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // conversationTitle
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // portraitUrl
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // unreadMessageCount
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isTop
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // receivedStatus
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sentStatus
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // receivedTime
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // sentTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // objectName
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // senderUserId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // senderUserName
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // latestMessageId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // latestMessage
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // draft
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ConversationEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFriendId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setConversationType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTargetId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setConversationTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPortraitUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnreadMessageCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsTop(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setReceivedStatus(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setSentStatus(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReceivedTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setSentTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setObjectName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSenderUserId(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setSenderUserName(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLatestMessageId(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setLatestMessage(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDraft(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ConversationEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ConversationEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ConversationEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
