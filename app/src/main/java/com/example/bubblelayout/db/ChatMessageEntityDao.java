package com.example.bubblelayout.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bubblelayout.entity.ChatMessageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_ENTITY".
*/
public class ChatMessageEntityDao extends AbstractDao<ChatMessageEntity, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_ENTITY";

    /**
     * Properties of entity ChatMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, Integer.class, "user_id", false, "USER_ID");
        public final static Property Friend_id = new Property(2, Integer.class, "friend_id", false, "FRIEND_ID");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(4, Integer.class, "type", false, "TYPE");
        public final static Property Post_date = new Property(5, Long.class, "post_date", false, "POST_DATE");
        public final static Property Is_read = new Property(6, Boolean.class, "is_read", false, "IS_READ");
        public final static Property IsmineChat = new Property(7, Integer.class, "ismineChat", false, "ISMINE_CHAT");
        public final static Property DeleteChat = new Property(8, Integer.class, "deleteChat", false, "DELETE_CHAT");
        public final static Property Nickname = new Property(9, String.class, "nickname", false, "NICKNAME");
        public final static Property Friend_avatar_url = new Property(10, String.class, "friend_avatar_url", false, "FRIEND_AVATAR_URL");
        public final static Property Mine_avatar_url = new Property(11, String.class, "mine_avatar_url", false, "MINE_AVATAR_URL");
        public final static Property Friend_nickname = new Property(12, String.class, "friend_nickname", false, "FRIEND_NICKNAME");
        public final static Property IsSave = new Property(13, Boolean.class, "isSave", false, "IS_SAVE");
        public final static Property Uid = new Property(14, String.class, "uid", false, "UID");
    }


    public ChatMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: user_id
                "\"FRIEND_ID\" INTEGER," + // 2: friend_id
                "\"CONTENT\" TEXT," + // 3: content
                "\"TYPE\" INTEGER," + // 4: type
                "\"POST_DATE\" INTEGER," + // 5: post_date
                "\"IS_READ\" INTEGER," + // 6: is_read
                "\"ISMINE_CHAT\" INTEGER," + // 7: ismineChat
                "\"DELETE_CHAT\" INTEGER," + // 8: deleteChat
                "\"NICKNAME\" TEXT," + // 9: nickname
                "\"FRIEND_AVATAR_URL\" TEXT," + // 10: friend_avatar_url
                "\"MINE_AVATAR_URL\" TEXT," + // 11: mine_avatar_url
                "\"FRIEND_NICKNAME\" TEXT," + // 12: friend_nickname
                "\"IS_SAVE\" INTEGER," + // 13: isSave
                "\"UID\" TEXT);"); // 14: uid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Integer friend_id = entity.getFriend_id();
        if (friend_id != null) {
            stmt.bindLong(3, friend_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Long post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindLong(6, post_date);
        }
 
        Boolean is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(7, is_read ? 1L: 0L);
        }
 
        Integer ismineChat = entity.getIsmineChat();
        if (ismineChat != null) {
            stmt.bindLong(8, ismineChat);
        }
 
        Integer deleteChat = entity.getDeleteChat();
        if (deleteChat != null) {
            stmt.bindLong(9, deleteChat);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(10, nickname);
        }
 
        String friend_avatar_url = entity.getFriend_avatar_url();
        if (friend_avatar_url != null) {
            stmt.bindString(11, friend_avatar_url);
        }
 
        String mine_avatar_url = entity.getMine_avatar_url();
        if (mine_avatar_url != null) {
            stmt.bindString(12, mine_avatar_url);
        }
 
        String friend_nickname = entity.getFriend_nickname();
        if (friend_nickname != null) {
            stmt.bindString(13, friend_nickname);
        }
 
        Boolean isSave = entity.getIsSave();
        if (isSave != null) {
            stmt.bindLong(14, isSave ? 1L: 0L);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(15, uid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindLong(2, user_id);
        }
 
        Integer friend_id = entity.getFriend_id();
        if (friend_id != null) {
            stmt.bindLong(3, friend_id);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(5, type);
        }
 
        Long post_date = entity.getPost_date();
        if (post_date != null) {
            stmt.bindLong(6, post_date);
        }
 
        Boolean is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(7, is_read ? 1L: 0L);
        }
 
        Integer ismineChat = entity.getIsmineChat();
        if (ismineChat != null) {
            stmt.bindLong(8, ismineChat);
        }
 
        Integer deleteChat = entity.getDeleteChat();
        if (deleteChat != null) {
            stmt.bindLong(9, deleteChat);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(10, nickname);
        }
 
        String friend_avatar_url = entity.getFriend_avatar_url();
        if (friend_avatar_url != null) {
            stmt.bindString(11, friend_avatar_url);
        }
 
        String mine_avatar_url = entity.getMine_avatar_url();
        if (mine_avatar_url != null) {
            stmt.bindString(12, mine_avatar_url);
        }
 
        String friend_nickname = entity.getFriend_nickname();
        if (friend_nickname != null) {
            stmt.bindString(13, friend_nickname);
        }
 
        Boolean isSave = entity.getIsSave();
        if (isSave != null) {
            stmt.bindLong(14, isSave ? 1L: 0L);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(15, uid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageEntity readEntity(Cursor cursor, int offset) {
        ChatMessageEntity entity = new ChatMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // friend_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // post_date
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // is_read
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ismineChat
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // deleteChat
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nickname
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // friend_avatar_url
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mine_avatar_url
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // friend_nickname
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // isSave
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // uid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setFriend_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPost_date(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIs_read(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setIsmineChat(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDeleteChat(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setNickname(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFriend_avatar_url(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMine_avatar_url(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFriend_nickname(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsSave(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setUid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
